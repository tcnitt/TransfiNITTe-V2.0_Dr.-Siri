<%include partials/studentHeader%>
<div id="datasource" style="display: none">
  <%= JSON.stringify(workflows) %>
</div>

<script>
  var treeData1 =
  {
    "name": "Head of Department",
    "children": [
      {
        "name": "Hostel Warden",
        "children": [
          { "name": "Associate Dean" }
        ]
      }
    ]
  };

  var treeData2 = 
  {
    "name": "Faculty Advisor",
  };

  var treeData3 =
  {
    "name": "",
    "children": [
      {
        "name": "Level 2: A",
        "children": [
          { "name": "Son of A" }
        ]
      }
    ]
  };
  let workflows = JSON.parse(document.getElementById("datasource").textContent);
  console.log(workflows, "A")
</script>


<div class="animated fadeIn">
    <!-- Widgets  -->
    <div style="text-align: center;">
      <div style="font-size: 40px; font-weight: 600; text-transform: uppercase;">Application forms</div>
    </div>
    <br />
</br>
<br>
<div class="row text-center">
      <div class="col-lg-12">
          <div class="" >
              <div class="">
                <div class="row">
                <% console.log(workflows); for(let i=0; i<workflows.length; i++) {%>
                <div class="col-md-4">
                    <aside class="profile-nav alt">
                        <section class="card">
                            <div class="card-header user-header">
                                <div class="media">
                                    <div class="media-body">
                                        <div style="font-size: 30px; font-weight: 500;"><%= workflows[i].name %></div>
                                    </div>
                                </div>
                            </div>
                            <div id="heap<%=i%>" style="min-height: 70px;"></div>
                            <div class="row text-center" style="margin-bottom: 20px;">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-4"><button class="btn remind btn-info m-1" id="remind"
                                            onclick="">View Form</button></div>
                                    <div class="col-lg-4"><a class="btn withdraw btn-success m-1" id="withdraw"
                                            href="/request/create/<%=workflows[i].id%>">Apply</a></div>
                                    <div class="col-lg-2"></div>
                                  </div>
                        </section>
                    </aside>
                </div>
                <% } %>
         </div>
      </div>
    </div>
  </div>
</div>
</div>


<script>
    function remindClickHandler() {
        console.log("remind Clicked!")
        // this formID should send a reminder to its next approver. Priority 1
    }
    function applyClickHandler() {
        console.log("withdraw Clicked!")
        // delete this formID from all tables. Priority 3
    }
    function downloadFormClickHandler() {
        console.log("download form clicked!")
        // download this formID with its blanks filled in. Priority 4
    }
    function viewRejectionClickHandler() {
        console.log("View Rejection CLicked!")
        // View rejection string of this formID and also get who wrote this rejection. Priority 2
    }

var treeData1 =
  {
    "name": "Head of Department",
    "children": [
      {
        "name": "Hostel Warden",
        "children": [
          { "name": "Associate Dean" }
        ]
      }
    ]
  };

  var treeData2 =
  {
    "name": "Faculty Advisor",
  };

  var treeData3 =
  {
    "name": "",
    "children": [
      {
        "name": "Level 2: A",
        "children": [
          { "name": "Son of A" }
        ]
      }
    ]
  };

  let workflows = JSON.parse(document.getElementById("datasource").textContent);
  console.log(workflows);
  let treeDatas =[];
  for(let i=0; i<workflows.length; i++){
    let parent = {};
    let temp=parent;
    let approvers = workflows[i].approvers;
    console.log(approvers);
    for(let j=0; j<approvers.length; j++){
      temp.name=approvers[i].grp.name;
      temp.children={};
      temp=temp.children;
    }
    console.log(parent);
    treeDatas.push(parent);
  }
  console.log(treeDatas[0]);


// Set the dimensions and margins of the diagram
var margin = {top: 20, right: 0, bottom: 30, left: -80},
    width = 500 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;
// append the svg object to the body of the page
// appends a 'group' element to 'svg'
// moves the 'group' element to the top left margin
var svg = d3.select("#heap0").append("svg")
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate("
          + margin.left + "," + margin.top + ")");
var i = 0,
    duration = 750,
    root;
// declares a tree layout and assigns the size
var treemap = d3.tree().size([height, width]);
// Assigns parent, children, height, depth
root = d3.hierarchy(treeData1, function(d) { return d.children; });
root.x0 = height / 2;
root.y0 = 0;
// Collapse after the second level
//root.children.forEach(collapse);
update(root);
// Collapse the node and all it's children
function collapse(d) {
  if(d.children) {
    d._children = d.children
    d._children.forEach(collapse)
    d.children = null
  }
}
function update(source) {
  // Assigns the x and y position for the nodes
  var treeData = treemap(root);
  // Compute the new tree layout.
  var nodes = treeData.descendants(),
      links = treeData.descendants().slice(1);
  // Normalize for fixed-depth.
  nodes.forEach(function(d){ d.y = d.depth * 180});
  // ****************** Nodes section ***************************
  // Update the nodes...
  var node = svg.selectAll('g.node')
      .data(nodes, function(d) {return d.id || (d.id = ++i); });
  // Enter any new modes at the parent's previous position.
  var nodeEnter = node.enter().append('g')
      .attr('class', 'node')
      .attr("transform", function(d) {
        return "translate(" + source.y0 + "," + source.x0 + ")";
    })
    .on('click', click);
  // Add Circle for the nodes
  nodeEnter.append('circle')
      .attr('class', 'node')
      .attr('r', 1e-6)
      .style("fill", function(d) {
          return d._children ? "lightsteelblue" : "#fff";
      });
  // Add labels for the nodes
  nodeEnter.append('text')
      .attr("dy", ".35em")
      .attr("x", function(d) {
          return d.children || d._children ? -13 : 13;
      })
      .attr("text-anchor", function(d) {
          return d.children || d._children ? "end" : "start";
      })
      .text(function(d) { return d.data.name; });
  // UPDATE
  var nodeUpdate = nodeEnter.merge(node);
  // Transition to the proper position for the node
  nodeUpdate.transition()
    .duration(duration)
    .attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
     });
  // Update the node attributes and style
  nodeUpdate.select('circle.node')
    .attr('r', 10)
    .style("fill", function(d) {
        return d._children ? "lightsteelblue" : "#fff";
    })
    .attr('cursor', 'pointer');
  // Remove any exiting nodes
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) {
          return "translate(" + source.x + "," + source.y + ")";
      })
      .remove();
  // On exit reduce the node circles size to 0
  nodeExit.select('circle')
    .attr('r', 1e-6);
  // On exit reduce the opacity of text labels
  nodeExit.select('text')
    .style('fill-opacity', 1e-6);
  // ****************** links section ***************************
  // Update the links...
  var link = svg.selectAll('path.link')
      .data(links, function(d) { return d.id; });
  // Enter any new links at the parent's previous position.
  var linkEnter = link.enter().insert('path', "g")
      .attr("class", "link")
      .attr('d', function(d){
        var o = {x: source.x0, y: source.y0}
        return diagonal(o, o)
      });
  // UPDATE
  var linkUpdate = linkEnter.merge(link);
  // Transition back to the parent element position
  linkUpdate.transition()
      .duration(duration)
      .attr('d', function(d){ return diagonal(d, d.parent) });
  // Remove any exiting links
  var linkExit = link.exit().transition()
      .duration(duration)
      .attr('d', function(d) {
        var o = {x: source.x, y: source.y}
        return diagonal(o, o)
      })
      .remove();
  // Store the old positions for transition.
  nodes.forEach(function(d){
    d.x0 = d.x;
    d.y0 = d.y;
  });
  // Creates a curved (diagonal) path from parent to the child nodes
 function diagonal(s, d) {
  //console.log('in diag and s = ', s);
  //console.log('d = ', d)
  path = `M ${s.x} ${s.y}
          C ${(s.x + d.x) / 2} ${s.y},
            ${(s.x + d.x) / 2} ${d.y},
            ${d.x} ${d.y}`
  return path;
 }
  // Toggle children on click.
  function click(d) {
    console.log("Clicked")
    // if (d.children) {
    //     d._children = d.children;
    //     d.children = null;
    //   } else {
    //     d.children = d._children;
    //     d._children = null;
    //   }
    // update(d);
  }
}


</script>


<%include partials/footer%>
